class ToggleSwitch extends HTMLElement{static get observedAttributes(){return["checked"]}constructor(){super(),this._checked=null;const toggle_width="2.5rem",toggle_height="1rem",toggle_border_thickness="0.05rem",toggle_border_color="gray",toggle_disabled_color="white",toggle_enabled_color="#adff99",toggle_handle_color="white",toggle_handle_diameter="calc(1rem + 0.4rem)",shadow=this.attachShadow({mode:"closed"}),checkbox_element=document.createElement("input");this._checkbox_element=checkbox_element,checkbox_element.setAttribute("type","checkbox"),checkbox_element.setAttribute("id","checkbox"),this.hasAttribute("checked")&&(checkbox_element.checked=!0);const toggle_background_element=document.createElement("label");toggle_background_element.setAttribute("for","checkbox"),toggle_background_element.setAttribute("part","foundation");const toggle_handle_element=document.createElement("div");toggle_handle_element.setAttribute("part","handle");const style=document.createElement("style");style.textContent="\n        #checkbox {\n            display: none;\n            transition: 0.3s;\n        }\n\n        #checkbox+label {\n            display: inline-block;\n            background: white;\n            width: 2.5rem;\n            height: 1rem;\n            border: solid 0.05rem gray;\n            border-radius: 2.5rem;\n            margin: calc(calc(1rem + 0.4rem) - 1rem);\n            padding: 0;\n            vertical-align: bottom;\n            overflow: visible;\n            transition: 0.3s;\n            cursor: pointer;\n        }\n\n        #checkbox:checked+label {\n            background: #adff99;\n        }\n\n        #checkbox+label div {\n            display: block;\n            background: white;\n            width: calc(1rem + 0.4rem);\n            height: calc(1rem + 0.4rem);\n            border: gray solid 0.05rem;\n            border-radius: 2.5rem;\n            transition: 0.3s;\n            margin: 0;\n            position: relative;\n            top: calc(0.05rem * -1 - 0.2rem);\n            left: calc(0.05rem * -1 - 0.2rem);\n        }\n\n        #checkbox:checked+label div {\n            margin-left: 100%;\n            transform: translateX(-50%);\n        }\n\n        :host {\n            display: inline-block;\n        }\n        ",shadow.appendChild(checkbox_element),shadow.appendChild(toggle_background_element),shadow.appendChild(style),toggle_background_element.appendChild(toggle_handle_element),checkbox_element.addEventListener("change",()=>{checkbox_element.checked?this.setAttribute("checked",""):this.removeAttribute("checked");const change_event=new CustomEvent("change");this.dispatchEvent(change_event)}),checkbox_element.addEventListener("input",()=>{checkbox_element.checked?this.setAttribute("checked",""):this.removeAttribute("checked")})}attributeChangedCallback(name,old_value,new_value){switch(name){case"checked":this._checked=new_value,new_value||""===new_value?this._checkbox_element.setAttribute("checked",""):this._checkbox_element.removeAttribute("checked")}}get checked(){return this.hasAttribute("checked")}set checked(value){value?(this._checkbox_element.setAttribute("checked",""),this.setAttribute("checked","")):(this._checkbox_element.removeAttribute("checked"),this.removeAttribute("checked"))}}customElements.define("toggle-switch",ToggleSwitch);class UnderlineTextbox extends HTMLElement{static get observedAttributes(){return["value","autocomplete","list","maxlength","minlength","pattern","placeholder","readonly","required","size"]}constructor(){super(),this._value=null,this._autocomplete=null,this._list=null,this._maxlength=null,this._minlength=null,this._pattern=null,this._placeholder=null,this._readonly=null,this._required=null,this._size=null;const underline_color_normal="rgba(0, 0, 0, 0.7)",underline_color_focused="#ff6a00",underline_thickness="0.15rem",shadow=this.attachShadow({mode:"closed"}),input_element=document.createElement("input");this._input_element=input_element,input_element.setAttribute("type","text"),input_element.setAttribute("id","textbox"),input_element.setAttribute("part","textbox"),this.hasAttribute("value")&&(input_element.value=this.getAttribute("value")),this.hasAttribute("autocomplete")&&input_element.setAttribute("autocomplete",this.getAttribute("autocomplete")),this.hasAttribute("list")&&input_element.setAttribute("list",this.getAttribute("list")),this.hasAttribute("maxlength")&&input_element.setAttribute("maxlength",this.getAttribute("maxlength")),this.hasAttribute("minlength")&&input_element.setAttribute("minlength",this.getAttribute("minlength")),this.hasAttribute("pattern")&&input_element.setAttribute("pattern",this.getAttribute("pattern")),this.hasAttribute("placeholder")&&input_element.setAttribute("placeholder",this.getAttribute("placeholder")),this.hasAttribute("readonly")&&input_element.setAttribute("readonly",this.getAttribute("readonly")),this.hasAttribute("required")&&input_element.setAttribute("required",this.getAttribute("required")),this.hasAttribute("size")&&input_element.setAttribute("size",this.getAttribute("size"));const underline_group=document.createElement("div");underline_group.setAttribute("id","underline_group");const normal_underline=document.createElement("div");normal_underline.setAttribute("id","normal_underline"),normal_underline.setAttribute("part","normal_underline");const focused_underline=document.createElement("div");focused_underline.setAttribute("id","focused_underline"),focused_underline.setAttribute("part","focused_underline");const style=document.createElement("style");style.textContent="\n        #textbox {\n            width: 100%;\n            height: 100%;\n            border: none;\n            outline: none;\n            background: transparent;\n            margin: 0 0 0.15rem 0;\n            padding: 0.15rem;\n            box-sizing: border-box;\n        }\n\n        #textbox + #underline_group {\n            width: 100%;\n            height: 0.15rem;\n            position: relative;\n            left: 0;\n            top: calc(-1.5 * 0.15rem);\n            margin: 0;\n            padding: 0;\n        }\n\n        #textbox + #underline_group #normal_underline {\n            width: 100%;\n            height: 100%;\n            position: absolute;\n            background: rgba(0, 0, 0, 0.7);\n            border-radius: 0.15rem;\n            margin: 0;\n            padding: 0;\n        }\n\n        #textbox + #underline_group #focused_underline {\n            width: 0;\n            height: 100%;\n            position: absolute;\n            background: #ff6a00;\n            transition: 0.3s;\n            margin: 0 0 0 50%;\n            padding: 0;\n            border-radius: 0.15rem;\n        }\n\n        #textbox:focus + #underline_group #focused_underline {\n            width: 100%;\n            margin: 0;\n        }\n\n        :host {\n            display: inline-block;\n        }\n        ",shadow.appendChild(input_element),underline_group.appendChild(normal_underline),underline_group.appendChild(focused_underline),shadow.appendChild(underline_group),shadow.appendChild(style),input_element.addEventListener("change",()=>{this.setAttribute("value",input_element.value);const change_event=new CustomEvent("change");this.dispatchEvent(change_event)}),input_element.addEventListener("input",()=>{this.setAttribute("value",input_element.value)}),Object.keys(this).forEach((function(property_name){const attribute_name=property_name.replace(/^_+/,"");Object.defineProperty(this,attribute_name,{get:function(){return this.getAttribute(attribute_name)},set:function(v){this.setAttribute(attribute_name,v),this._input_element.setAttribute(attribute_name,v)}})}),this)}attributeChangedCallback(name,old_value,new_value){function change_attribute(attribute_name){const property_name="_"+attribute_name;this[property_name]=new_value,this._input_element.setAttribute(attribute_name,new_value)}name in["value","autocomplete","list","maxlength","minlength","pattern","placeholder","readonly","required","size"]&&change_attribute.bind(this)(name)}}customElements.define("underlined-textbox",UnderlineTextbox);class Ripple{
/*! The Orizinal Program: Ripple.js v1.2.1
    * The MIT License (MIT)
    * Copyright (c) 2014 Jacob Kelley 
    * Improved by Copyright (c) 2020 Robot-Inventor */
constructor(selector,options){const self=this,ripple_style=document.createElement("style");ripple_style.textContent="\n.has-ripple{\n    position: relative;\n    overflow: hidden;\n    -webkit-transform: translate3d(0,0,0);\n    -o-transform: translate3d(0,0,0);\n    transform: translate3d(0,0,0);\n}\n\n.ripple{\n    display: block;\n    position: absolute;\n    pointer-events: none;\n    border-radius: 50%;\n    -webkit-transform: scale(0);\n    -o-transform: scale(0);\n    transform: scale(0);\n    background: #fff;\n    opacity: 1;\n}\n\n.ripple-animate{\n    -webkit-animation: ripple;\n    -o-animation: ripple;\n    animation: ripple;\n}\n\n@-webkit-keyframes ripple{\n    100%{\n        opacity: 0;\n        -webkit-transform: scale(2);\n        transform: scale(2);\n    }\n}\n\n@-o-keyframes ripple{\n    100%{\n        opacity: 0;\n        -o-transform: scale(2);\n        transform: scale(2);\n    }\n}\n\n@keyframes ripple{\n    100%{\n        opacity: 0;\n        transform: scale(2);\n    }\n}\n        ",document.body.appendChild(ripple_style);const _log=self.log=function(){self.defaults.debug&&console&&console.log&&console.log.apply(console,arguments)};function Trigger(e){let ripple;this.classList.add("has-ripple");const settings=Object.assign({},self.defaults,this.dataset);if(settings.multi||!settings.multi&&0===this.querySelectorAll(".ripple").length){if(ripple=document.createElement("span"),ripple.classList.add("ripple"),this.appendChild(ripple),_log("Create: Ripple"),!ripple.clientHeight&&!ripple.clientWidth){const size=Math.max(this.offsetWidth,this.offsetHeight);ripple.style.height=size+"px",ripple.style.width=size+"px",_log("Set: Ripple size")}if(settings.rate&&"function"==typeof settings.rate){const rate=Math.round(ripple.clientWidth/settings.duration),filteredRate=settings.rate(rate),newDuration=ripple.clientWidth/filteredRate;settings.duration.toFixed(2)!==newDuration.toFixed(2)&&(_log("Update: Ripple Duration",{from:settings.duration,to:newDuration}),settings.duration=newDuration)}const color="auto"==settings.color?getComputedStyle(this,null).getPropertyValue("color"):settings.color,css={animationDuration:settings.duration.toString()+"s",animationTimingFunction:settings.easing,background:color,opacity:settings.opacity};_log("Set: Ripple CSS",css),ripple.style.animationDuration=settings.duration.toString()+"s",ripple.style.animationTimingFunction=settings.easing,ripple.style.background=color,ripple.style.opacity=settings.opacity}settings.multi||(_log("Set: Ripple Element"),ripple=this.querySelector(".ripple")),_log("Destroy: Ripple Animation"),ripple.classList.remove("ripple-animate");const x=e.pageX-this.getBoundingClientRect().left-document.documentElement.scrollLeft-ripple.clientWidth/2,y=e.pageY-this.getBoundingClientRect().top-document.documentElement.scrollTop-ripple.clientHeight/2;settings.multi&&(_log("Set: Ripple animationend event"),["animationend","webkitAnimationEnd","oanimationend","MSAnimationEnd"].forEach((function(e){ripple.addEventListener(e,(function(){_log("Note: Ripple animation ended"),_log("Destroy: Ripple"),ripple.remove()}),{once:!0})}))),_log("Set: Ripple location"),_log("Set: Ripple animation"),ripple.style.top=y+"px",ripple.style.left=x+"px",ripple.classList.add("ripple-animate")}self.selector=selector,self.defaults={debug:!1,on:"mousedown",opacity:.4,color:"auto",multi:!1,duration:.7,rate:function(pxPerSecond){return pxPerSecond},easing:"linear"},self.defaults=Object.assign({},self.defaults,options);const ripple_elements=document.querySelectorAll(self.selector);ripple_elements.forEach(element=>{element.addEventListener(self.defaults.on,Trigger)})}}